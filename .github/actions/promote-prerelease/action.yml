name: Promote Prerelease
description: Promote a prerelease to a release and update the latest release
inputs:
  release_name_prefix:
    description: The prefix for the release name
    required: true
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Find associated pull request
      uses: Energinet-DataHub/.github/.github/actions/find-related-pr-number@v14
      id: find_pull_request
    - name: Set release_name
      id: set_release_name
      shell: bash
      run: |
        echo "release_name=${{ inputs.release_name_prefix }}_${{ steps.find_pull_request.outputs.pull_request_number }}" >>$GITHUB_OUTPUT
    - name: Promote ${{ steps.set_release_name.outputs.release_name }} and update ${{ inputs.release_name_prefix }}_latest
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo 'Promoting ${{ steps.set_release_name.outputs.release_name }} from pre-release to release'
        gh release edit ${{ steps.set_release_name.outputs.release_name }} --prerelease=false

        echo 'Checking if ${{ inputs.release_name_prefix }}_latest exists'
        set +e
        gh release view ${{ inputs.release_name_prefix }}_latest
        LATEST_EXIST=$?
        set -e

        if [ $LATEST_EXIST -eq 0 ]; then
          echo 'Deleting ${{ inputs.release_name_prefix }}_latest'
          gh release delete ${{ inputs.release_name_prefix }}_latest --yes
        else
          echo '${{ inputs.release_name_prefix }}_latest does not exist'
        fi

        echo 'Creating new ${{ inputs.release_name_prefix }}_latest'
        gh release create ${{ inputs.release_name_prefix }}_latest --title ${{ inputs.release_name_prefix }}_latest --notes "RELEASE_NAME=${{ steps.set_release_name.outputs.release_name }}" --latest
