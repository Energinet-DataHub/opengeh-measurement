name: CI Databricks

on:
  workflow_call:
    inputs:
      image_tag:
        type: string
        default: latest
      package_name:
        type: string
        required: true

jobs:
  uv-example:
    name: python
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install

      - name: Install the project
        run: |
          cd source/${{ inputs.package_name }}
          uv sync --all-extras --dev

      - name: Run tests
        # For example, using `pytest`
        run: |
          cd source/${{ inputs.package_name }}
          uv run pytest tests

      - name: Build Wheel
        run: uv build

  databricks_ci_build:
    uses: Energinet-DataHub/.github/.github/workflows/databricks-build-prerelease.yml@v14
    with:
      python_version: 3.11.7
      architecture: x64
      wheel_working_directory: ./source/${{ inputs.package_name }}
      prerelease_prefix: ${{ inputs.package_name }}

  unit_tests:
    strategy:
      fail-fast: false
      matrix:
        # IMPORTANT: When adding a new folder here it should also be added in the `unit_test_check` job!
        tests_filter_expression:
          - name: ${{ inputs.package_name }} Tests
            paths: ${{ inputs.package_name }}_tests/
    uses: Energinet-DataHub/.github/.github/workflows/python-ci.yml@v14
    with:
      job_name: ${{ matrix.tests_filter_expression.name }}
      operating_system: dh3-ubuntu-20.04-4core
      path_static_checks: ./source/${{ inputs.package_name }}
      # documented here: https://github.com/Energinet-DataHub/opengeh-wholesale/tree/main/source/databricks#styling-and-formatting
      ignore_errors_and_warning_flake8: E501,F401,E402,E203,W503
      tests_folder_path: ./source/${{ inputs.package_name }}/tests
      test_report_path: ./source/${{ inputs.package_name }}/tests
      # See .docker/entrypoint.py on how to use the filter expression
      tests_filter_expression: ${{ matrix.tests_filter_expression.paths }}
      image_tag: ${{ inputs.image_tag }}

  # Check executed unit tests
  unit_test_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Execute python tests
        shell: bash
        id: test_count
        run: |
          # IMPORTANT: When adding a new folder here, one must also add the folder
          # to one of the test jobs above! This is because this filter contains the sum of all folders
          # from test jobs.
          test_path="source/${{ inputs.package_name }}/tests/"
          filter="${{ inputs.package_name }}_tests/"

          chmod +x ./.devcontainer/check_test_count.sh
          IMAGE_TAG=${{ inputs.image_tag }} docker compose -f .devcontainer/docker-compose.yml run --rm -u root python-unit-test ./.devcontainer/check_test_count.sh $test_path $filter


  mypy_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Run pip install and mypy check of files in package
        shell: bash
        run: |
          pip install --upgrade pip
          pip install mypy types-python-dateutil
          mypy ./source/${{ inputs.package_name }} --disallow-untyped-defs --ignore-missing-imports

  black_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable
        with:
          options: --check --diff
          src: ./source/${{ inputs.package_name }}
