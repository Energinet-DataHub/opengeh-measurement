name: CI orchestrator

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PACKAGES_DIR: source

jobs:
  #
  # License and Markdown Check
  #
  ci_base:
    uses: Energinet-DataHub/.github/.github/workflows/ci-base.yml@v14
    with:
      skip_license_check: true
    secrets:
      dh3serviceaccount_privatekey: ${{ secrets.dh3serviceaccount_privatekey }}

  #
  # Build Package Matrix
  #
  ci_matrix:
    name: Build Package Matrix
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.package_matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11
      - name: Create Package Matrix
        id: package_matrix
        shell: python
        run: |
          import json
          import os
          import tomllib
          from pathlib import Path

          packages = Path("${{ env.PACKAGES_DIR }}").rglob("pyproject.toml")
          matrix = []
          for toml in packages:
              if str(toml.parent) == ".":
                  continue
              with open(toml, "rb") as fh:
                  data = tomllib.load(fh)
              name = data.get("project", {}).get("name")
              version = data.get("project", {}).get("version")
              project_data = {
                "name": name,
                "version": version,
                "path": str(toml.parent)
              }
              matrix.append(project_data)
          include_statement = json.dumps({"inputs": matrix})
          print(include_statement)
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f"matrix={include_statement}", file=fh)

  #
  # Test Packages
  #
  ci_test:
    name: Test Packages
    runs-on: ubuntu-24.04
    needs: ci_matrix
    strategy:
      matrix: ${{ fromJson(needs.ci_matrix.outputs.matrix) }}
    permissions:
      contents: write
      checks: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Print Inputs
        run: |
          echo "Path: ${{ matrix.inputs.path }}"
          echo "Name: ${{ matrix.inputs.name }}"
      - name: Check if ${{ matrix.inputs.name }} has changed
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            is_changed:
              - ${{ matrix.inputs.path }}/**
      - name: Test ${{ matrix.inputs.name }}
        uses: ./.github/actions/uvtest
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        with:
          name: ${{ matrix.inputs.name }}
          path: ${{ matrix.inputs.path }}
      - name: Upload prerelease
        uses: ./.github/actions/create-prerelease
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        with:
          name: ${{ matrix.inputs.name }}
          path: ${{ matrix.inputs.path }}
          issue-number: ${{ github.event.pull_request.number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

  # ci_bronze:
  #   needs: [changes, ci_docker]
  #   if: ${{ needs.changes.outputs.bronze == 'true' }}
  #   uses: ./.github/workflows/ci-databricks.yml
  #   with:
  #     image_tag: ${{ needs.ci_docker.outputs.image_tag }}
  #     package_name: bronze
  #
  # Branch policy status check
  #
  allow_merge_ci_orchestrator:
    runs-on: ubuntu-24.04
    needs: [ci_base, ci_matrix, ci_test]
    if: |
      always()
    steps:
      - name: Verify if merge is allowed
        run: |
          echo "${{ toJSON(needs) }}"
          if [[ ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }} = true ]]; then
              echo "Failed"
              exit 1
          fi
